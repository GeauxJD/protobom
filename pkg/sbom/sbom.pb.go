// --------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: protobom/v1/sbom.proto

package sbom

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration of SBOM document types.
type DocumentType_SBOMType int32

const (
	// Other document type.
	DocumentType_OTHER DocumentType_SBOMType = 0
	// Design document type. (CDX: design)
	DocumentType_DESIGN DocumentType_SBOMType = 1
	// Source document type. (CDX: pre-build)
	DocumentType_SOURCE DocumentType_SBOMType = 2
	// Build document type. (CDX: build)
	DocumentType_BUILD DocumentType_SBOMType = 3
	// Analyzed document type. (CDX: post-build)
	DocumentType_ANALYZED DocumentType_SBOMType = 4
	// Deployed document type. (CDX: operations)
	DocumentType_DEPLOYED DocumentType_SBOMType = 5
	// Runtime document type. (CDX: none)
	DocumentType_RUNTIME DocumentType_SBOMType = 6
	// Discovery document type. (CDX Specific)
	DocumentType_DISCOVERY DocumentType_SBOMType = 7
	// Decommission document type. (CDX Specific)
	DocumentType_DECOMISSION DocumentType_SBOMType = 8
)

// Enum value maps for DocumentType_SBOMType.
var (
	DocumentType_SBOMType_name = map[int32]string{
		0: "OTHER",
		1: "DESIGN",
		2: "SOURCE",
		3: "BUILD",
		4: "ANALYZED",
		5: "DEPLOYED",
		6: "RUNTIME",
		7: "DISCOVERY",
		8: "DECOMISSION",
	}
	DocumentType_SBOMType_value = map[string]int32{
		"OTHER":       0,
		"DESIGN":      1,
		"SOURCE":      2,
		"BUILD":       3,
		"ANALYZED":    4,
		"DEPLOYED":    5,
		"RUNTIME":     6,
		"DISCOVERY":   7,
		"DECOMISSION": 8,
	}
)

func (x DocumentType_SBOMType) Enum() *DocumentType_SBOMType {
	p := new(DocumentType_SBOMType)
	*p = x
	return p
}

func (x DocumentType_SBOMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentType_SBOMType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobom_v1_sbom_proto_enumTypes[0].Descriptor()
}

func (DocumentType_SBOMType) Type() protoreflect.EnumType {
	return &file_protobom_v1_sbom_proto_enumTypes[0]
}

func (x DocumentType_SBOMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentType_SBOMType.Descriptor instead.
func (DocumentType_SBOMType) EnumDescriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{1, 0}
}

// Type representing the node relationship.
type Edge_Type int32

const (
	// Unknown type.
	Edge_UNKNOWN Edge_Type = 0
	// Amends relationship type.
	Edge_AMENDS Edge_Type = 1
	// Ancestor relationship type.
	Edge_ANCESTOR Edge_Type = 2
	// Build dependency relationship type.
	Edge_BUILD_DEPENDENCY Edge_Type = 3
	// Build tool relationship type.
	Edge_BUILD_TOOL Edge_Type = 4
	// Contains relationship type.
	Edge_CONTAINS Edge_Type = 5
	// Contained by relationship type. In SPDX 3.x, this field is not supported.
	Edge_CONTAINED_BY Edge_Type = 6
	// Copy relationship type.
	Edge_COPY Edge_Type = 7
	// Data file relationship type.
	Edge_DATA_FILE Edge_Type = 8
	// Dependency manifest relationship type.
	Edge_DEPENDENCY_MANIFEST Edge_Type = 9
	// Depends on relationship type.
	Edge_DEPENDS_ON Edge_Type = 10
	// Dependency of relationship type. In SPDX 3.x, this field is not supported.
	Edge_DEPENDENCY_OF Edge_Type = 11
	// Descendant relationship type.
	Edge_DESCENDANT Edge_Type = 12
	// Describes relationship type.
	Edge_DESCRIBES Edge_Type = 13
	// Described by relationship type. In SPDX 3.x, this field is not supported.
	Edge_DESCRIBED_BY Edge_Type = 14
	// Development dependency relationship type.
	Edge_DEV_DEPENDENCY Edge_Type = 15
	// Development tool relationship type.
	Edge_DEV_TOOL Edge_Type = 16
	// Distribution artifact relationship type.
	Edge_DISTRIBUTION_ARTIFACT Edge_Type = 17
	// Documentation relationship type.
	Edge_DOCUMENTATION Edge_Type = 18
	// Dynamic link relationship type.
	Edge_DYNAMIC_LINK Edge_Type = 19
	// Example relationship type.
	Edge_EXAMPLE Edge_Type = 20
	// Expanded from archive relationship type.
	Edge_EXPANDED_FROM_ARCHIVE Edge_Type = 21
	// File added relationship type.
	Edge_FILE_ADDED Edge_Type = 22
	// File deleted relationship type.
	Edge_FILE_DELETED Edge_Type = 23
	// File modified relationship type.
	Edge_FILE_MODIFIED Edge_Type = 24
	// Generates relationship type.
	Edge_GENERATES Edge_Type = 25
	// Generated from relationship type. In SPDX 3.x, this field is not supported.
	Edge_GENERATED_FROM Edge_Type = 26
	// Metafile relationship type.
	Edge_METAFILE Edge_Type = 27
	// Optional component relationship type.
	Edge_OPTIONAL_COMPONENT Edge_Type = 28
	// Optional dependency relationship type.
	Edge_OPTIONAL_DEPENDENCY Edge_Type = 29
	// Other relationship type.
	Edge_OTHER Edge_Type = 30
	// Packages relationship type.
	Edge_PACKAGES Edge_Type = 31
	// Patch relationship type.
	Edge_PATCH Edge_Type = 32
	// Prerequisite relationship type.
	Edge_PREREQUISITE Edge_Type = 33
	// Prerequisite for relationship type. In SPDX 3.x, this field is not supported.
	Edge_PREREQUISITE_FOR Edge_Type = 34
	// Provided dependency relationship type.
	Edge_PROVIDED_DEPENDENCY Edge_Type = 35
	// Requirement for relationship type.
	Edge_REQUIREMENT_FOR Edge_Type = 36
	// Runtime dependency relationship type.
	Edge_RUNTIME_DEPENDENCY Edge_Type = 37
	// Specification for relationship type.
	Edge_SPECIFICATION_FOR Edge_Type = 38
	// Static link relationship type.
	Edge_STATIC_LINK Edge_Type = 39
	// Test relationship type.
	Edge_TEST Edge_Type = 40
	// Test case relationship type.
	Edge_TEST_CASE Edge_Type = 41
	// Test dependency relationship type.
	Edge_TEST_DEPENDENCY Edge_Type = 42
	// Test tool relationship type.
	Edge_TEST_TOOL Edge_Type = 43
	// Variant relationship type.
	Edge_VARIANT Edge_Type = 44
)

// Enum value maps for Edge_Type.
var (
	Edge_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "AMENDS",
		2:  "ANCESTOR",
		3:  "BUILD_DEPENDENCY",
		4:  "BUILD_TOOL",
		5:  "CONTAINS",
		6:  "CONTAINED_BY",
		7:  "COPY",
		8:  "DATA_FILE",
		9:  "DEPENDENCY_MANIFEST",
		10: "DEPENDS_ON",
		11: "DEPENDENCY_OF",
		12: "DESCENDANT",
		13: "DESCRIBES",
		14: "DESCRIBED_BY",
		15: "DEV_DEPENDENCY",
		16: "DEV_TOOL",
		17: "DISTRIBUTION_ARTIFACT",
		18: "DOCUMENTATION",
		19: "DYNAMIC_LINK",
		20: "EXAMPLE",
		21: "EXPANDED_FROM_ARCHIVE",
		22: "FILE_ADDED",
		23: "FILE_DELETED",
		24: "FILE_MODIFIED",
		25: "GENERATES",
		26: "GENERATED_FROM",
		27: "METAFILE",
		28: "OPTIONAL_COMPONENT",
		29: "OPTIONAL_DEPENDENCY",
		30: "OTHER",
		31: "PACKAGES",
		32: "PATCH",
		33: "PREREQUISITE",
		34: "PREREQUISITE_FOR",
		35: "PROVIDED_DEPENDENCY",
		36: "REQUIREMENT_FOR",
		37: "RUNTIME_DEPENDENCY",
		38: "SPECIFICATION_FOR",
		39: "STATIC_LINK",
		40: "TEST",
		41: "TEST_CASE",
		42: "TEST_DEPENDENCY",
		43: "TEST_TOOL",
		44: "VARIANT",
	}
	Edge_Type_value = map[string]int32{
		"UNKNOWN":               0,
		"AMENDS":                1,
		"ANCESTOR":              2,
		"BUILD_DEPENDENCY":      3,
		"BUILD_TOOL":            4,
		"CONTAINS":              5,
		"CONTAINED_BY":          6,
		"COPY":                  7,
		"DATA_FILE":             8,
		"DEPENDENCY_MANIFEST":   9,
		"DEPENDS_ON":            10,
		"DEPENDENCY_OF":         11,
		"DESCENDANT":            12,
		"DESCRIBES":             13,
		"DESCRIBED_BY":          14,
		"DEV_DEPENDENCY":        15,
		"DEV_TOOL":              16,
		"DISTRIBUTION_ARTIFACT": 17,
		"DOCUMENTATION":         18,
		"DYNAMIC_LINK":          19,
		"EXAMPLE":               20,
		"EXPANDED_FROM_ARCHIVE": 21,
		"FILE_ADDED":            22,
		"FILE_DELETED":          23,
		"FILE_MODIFIED":         24,
		"GENERATES":             25,
		"GENERATED_FROM":        26,
		"METAFILE":              27,
		"OPTIONAL_COMPONENT":    28,
		"OPTIONAL_DEPENDENCY":   29,
		"OTHER":                 30,
		"PACKAGES":              31,
		"PATCH":                 32,
		"PREREQUISITE":          33,
		"PREREQUISITE_FOR":      34,
		"PROVIDED_DEPENDENCY":   35,
		"REQUIREMENT_FOR":       36,
		"RUNTIME_DEPENDENCY":    37,
		"SPECIFICATION_FOR":     38,
		"STATIC_LINK":           39,
		"TEST":                  40,
		"TEST_CASE":             41,
		"TEST_DEPENDENCY":       42,
		"TEST_TOOL":             43,
		"VARIANT":               44,
	}
)

func (x Edge_Type) Enum() *Edge_Type {
	p := new(Edge_Type)
	*p = x
	return p
}

func (x Edge_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Edge_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protobom_v1_sbom_proto_enumTypes[1].Descriptor()
}

func (Edge_Type) Type() protoreflect.EnumType {
	return &file_protobom_v1_sbom_proto_enumTypes[1]
}

func (x Edge_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Edge_Type.Descriptor instead.
func (Edge_Type) EnumDescriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{2, 0}
}

// Type enumerator representing of the external reference.
type ExternalReference_Type int32

const (
	// Unknown type.
	ExternalReference_UNKNOWN ExternalReference_Type = 0
	// Attestation type.
	ExternalReference_ATTESTATION ExternalReference_Type = 1
	// Binary type.
	ExternalReference_BINARY ExternalReference_Type = 2
	// BOM type.
	ExternalReference_BOM ExternalReference_Type = 3
	// Bower type.
	ExternalReference_BOWER ExternalReference_Type = 4
	// Build meta type.
	ExternalReference_BUILD_META ExternalReference_Type = 5
	// Build system type.
	ExternalReference_BUILD_SYSTEM ExternalReference_Type = 6
	// Certification report type.
	ExternalReference_CERTIFICATION_REPORT ExternalReference_Type = 7
	// Chat type.
	ExternalReference_CHAT ExternalReference_Type = 8
	// Codified infrastructure type.
	ExternalReference_CODIFIED_INFRASTRUCTURE ExternalReference_Type = 9
	// Component analysis report type.
	ExternalReference_COMPONENT_ANALYSIS_REPORT ExternalReference_Type = 10
	// Configuration type.
	ExternalReference_CONFIGURATION ExternalReference_Type = 11
	// Distribution intake type.
	ExternalReference_DISTRIBUTION_INTAKE ExternalReference_Type = 12
	// Documentation type.
	ExternalReference_DOCUMENTATION ExternalReference_Type = 13
	// Download type.
	ExternalReference_DOWNLOAD ExternalReference_Type = 14
	// Dynamic analysis report type.
	ExternalReference_DYNAMIC_ANALYSIS_REPORT ExternalReference_Type = 15
	// End-of-life notice type.
	ExternalReference_EOL_NOTICE ExternalReference_Type = 16
	// Evidence type.
	ExternalReference_EVIDENCE ExternalReference_Type = 17
	// Export control assessment type.
	ExternalReference_EXPORT_CONTROL_ASSESSMENT ExternalReference_Type = 18
	// Formulation type.
	ExternalReference_FORMULATION ExternalReference_Type = 19
	// Funding type.
	ExternalReference_FUNDING ExternalReference_Type = 20
	// Issue tracker type.
	ExternalReference_ISSUE_TRACKER ExternalReference_Type = 21
	// License type.
	ExternalReference_LICENSE ExternalReference_Type = 22
	// Log type.
	ExternalReference_LOG ExternalReference_Type = 23
	// Mailing list type.
	ExternalReference_MAILING_LIST ExternalReference_Type = 24
	// Maturity report type.
	ExternalReference_MATURITY_REPORT ExternalReference_Type = 25
	// Maven Central type.
	ExternalReference_MAVEN_CENTRAL ExternalReference_Type = 26
	// Metrics type.
	ExternalReference_METRICS ExternalReference_Type = 27
	// Model card type.
	ExternalReference_MODEL_CARD ExternalReference_Type = 28
	// NPM type.
	ExternalReference_NPM ExternalReference_Type = 29
	// NuGet type.
	ExternalReference_NUGET ExternalReference_Type = 30
	// Other type.
	ExternalReference_OTHER ExternalReference_Type = 31
	// POAM type.
	ExternalReference_POAM ExternalReference_Type = 32
	// Privacy assessment type.
	ExternalReference_PRIVACY_ASSESSMENT ExternalReference_Type = 33
	// Product metadata type.
	ExternalReference_PRODUCT_METADATA ExternalReference_Type = 34
	// Purchase order type.
	ExternalReference_PURCHASE_ORDER ExternalReference_Type = 35
	// Quality assessment report type.
	ExternalReference_QUALITY_ASSESSMENT_REPORT ExternalReference_Type = 36
	// Quality metrics type.
	ExternalReference_QUALITY_METRICS ExternalReference_Type = 37
	// Release history type.
	ExternalReference_RELEASE_HISTORY ExternalReference_Type = 38
	// Release notes type.
	ExternalReference_RELEASE_NOTES ExternalReference_Type = 39
	// Risk assessment type.
	ExternalReference_RISK_ASSESSMENT ExternalReference_Type = 40
	// Runtime analysis report type.
	ExternalReference_RUNTIME_ANALYSIS_REPORT ExternalReference_Type = 41
	// Secure software attestation type.
	ExternalReference_SECURE_SOFTWARE_ATTESTATION ExternalReference_Type = 42
	// Security adversary model type.
	ExternalReference_SECURITY_ADVERSARY_MODEL ExternalReference_Type = 43
	// Security advisory type.
	ExternalReference_SECURITY_ADVISORY ExternalReference_Type = 44
	// Security contact type.
	ExternalReference_SECURITY_CONTACT ExternalReference_Type = 45
	// Security fix type.
	ExternalReference_SECURITY_FIX ExternalReference_Type = 46
	// Security other type.
	ExternalReference_SECURITY_OTHER ExternalReference_Type = 47
	// Security pentest report type.
	ExternalReference_SECURITY_PENTEST_REPORT ExternalReference_Type = 48
	// Security policy type.
	ExternalReference_SECURITY_POLICY ExternalReference_Type = 49
	// Security SWID type.
	ExternalReference_SECURITY_SWID ExternalReference_Type = 50
	// Security threat model type.
	ExternalReference_SECURITY_THREAT_MODEL ExternalReference_Type = 51
	// Social type.
	ExternalReference_SOCIAL ExternalReference_Type = 52
	// Source artifact type.
	ExternalReference_SOURCE_ARTIFACT ExternalReference_Type = 53
	// Static analysis report type.
	ExternalReference_STATIC_ANALYSIS_REPORT ExternalReference_Type = 54
	// Support type.
	ExternalReference_SUPPORT ExternalReference_Type = 55
	// VCS type.
	ExternalReference_VCS ExternalReference_Type = 56
	// Vulnerability assertion type.
	ExternalReference_VULNERABILITY_ASSERTION ExternalReference_Type = 57
	// Vulnerability disclosure report type.
	ExternalReference_VULNERABILITY_DISCLOSURE_REPORT ExternalReference_Type = 58
	// Vulnerability exploitability assessment type.
	ExternalReference_VULNERABILITY_EXPLOITABILITY_ASSESSMENT ExternalReference_Type = 59
	// Website type.
	ExternalReference_WEBSITE ExternalReference_Type = 60
)

// Enum value maps for ExternalReference_Type.
var (
	ExternalReference_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "ATTESTATION",
		2:  "BINARY",
		3:  "BOM",
		4:  "BOWER",
		5:  "BUILD_META",
		6:  "BUILD_SYSTEM",
		7:  "CERTIFICATION_REPORT",
		8:  "CHAT",
		9:  "CODIFIED_INFRASTRUCTURE",
		10: "COMPONENT_ANALYSIS_REPORT",
		11: "CONFIGURATION",
		12: "DISTRIBUTION_INTAKE",
		13: "DOCUMENTATION",
		14: "DOWNLOAD",
		15: "DYNAMIC_ANALYSIS_REPORT",
		16: "EOL_NOTICE",
		17: "EVIDENCE",
		18: "EXPORT_CONTROL_ASSESSMENT",
		19: "FORMULATION",
		20: "FUNDING",
		21: "ISSUE_TRACKER",
		22: "LICENSE",
		23: "LOG",
		24: "MAILING_LIST",
		25: "MATURITY_REPORT",
		26: "MAVEN_CENTRAL",
		27: "METRICS",
		28: "MODEL_CARD",
		29: "NPM",
		30: "NUGET",
		31: "OTHER",
		32: "POAM",
		33: "PRIVACY_ASSESSMENT",
		34: "PRODUCT_METADATA",
		35: "PURCHASE_ORDER",
		36: "QUALITY_ASSESSMENT_REPORT",
		37: "QUALITY_METRICS",
		38: "RELEASE_HISTORY",
		39: "RELEASE_NOTES",
		40: "RISK_ASSESSMENT",
		41: "RUNTIME_ANALYSIS_REPORT",
		42: "SECURE_SOFTWARE_ATTESTATION",
		43: "SECURITY_ADVERSARY_MODEL",
		44: "SECURITY_ADVISORY",
		45: "SECURITY_CONTACT",
		46: "SECURITY_FIX",
		47: "SECURITY_OTHER",
		48: "SECURITY_PENTEST_REPORT",
		49: "SECURITY_POLICY",
		50: "SECURITY_SWID",
		51: "SECURITY_THREAT_MODEL",
		52: "SOCIAL",
		53: "SOURCE_ARTIFACT",
		54: "STATIC_ANALYSIS_REPORT",
		55: "SUPPORT",
		56: "VCS",
		57: "VULNERABILITY_ASSERTION",
		58: "VULNERABILITY_DISCLOSURE_REPORT",
		59: "VULNERABILITY_EXPLOITABILITY_ASSESSMENT",
		60: "WEBSITE",
	}
	ExternalReference_Type_value = map[string]int32{
		"UNKNOWN":                         0,
		"ATTESTATION":                     1,
		"BINARY":                          2,
		"BOM":                             3,
		"BOWER":                           4,
		"BUILD_META":                      5,
		"BUILD_SYSTEM":                    6,
		"CERTIFICATION_REPORT":            7,
		"CHAT":                            8,
		"CODIFIED_INFRASTRUCTURE":         9,
		"COMPONENT_ANALYSIS_REPORT":       10,
		"CONFIGURATION":                   11,
		"DISTRIBUTION_INTAKE":             12,
		"DOCUMENTATION":                   13,
		"DOWNLOAD":                        14,
		"DYNAMIC_ANALYSIS_REPORT":         15,
		"EOL_NOTICE":                      16,
		"EVIDENCE":                        17,
		"EXPORT_CONTROL_ASSESSMENT":       18,
		"FORMULATION":                     19,
		"FUNDING":                         20,
		"ISSUE_TRACKER":                   21,
		"LICENSE":                         22,
		"LOG":                             23,
		"MAILING_LIST":                    24,
		"MATURITY_REPORT":                 25,
		"MAVEN_CENTRAL":                   26,
		"METRICS":                         27,
		"MODEL_CARD":                      28,
		"NPM":                             29,
		"NUGET":                           30,
		"OTHER":                           31,
		"POAM":                            32,
		"PRIVACY_ASSESSMENT":              33,
		"PRODUCT_METADATA":                34,
		"PURCHASE_ORDER":                  35,
		"QUALITY_ASSESSMENT_REPORT":       36,
		"QUALITY_METRICS":                 37,
		"RELEASE_HISTORY":                 38,
		"RELEASE_NOTES":                   39,
		"RISK_ASSESSMENT":                 40,
		"RUNTIME_ANALYSIS_REPORT":         41,
		"SECURE_SOFTWARE_ATTESTATION":     42,
		"SECURITY_ADVERSARY_MODEL":        43,
		"SECURITY_ADVISORY":               44,
		"SECURITY_CONTACT":                45,
		"SECURITY_FIX":                    46,
		"SECURITY_OTHER":                  47,
		"SECURITY_PENTEST_REPORT":         48,
		"SECURITY_POLICY":                 49,
		"SECURITY_SWID":                   50,
		"SECURITY_THREAT_MODEL":           51,
		"SOCIAL":                          52,
		"SOURCE_ARTIFACT":                 53,
		"STATIC_ANALYSIS_REPORT":          54,
		"SUPPORT":                         55,
		"VCS":                             56,
		"VULNERABILITY_ASSERTION":         57,
		"VULNERABILITY_DISCLOSURE_REPORT": 58,
		"VULNERABILITY_EXPLOITABILITY_ASSESSMENT": 59,
		"WEBSITE": 60,
	}
)

func (x ExternalReference_Type) Enum() *ExternalReference_Type {
	p := new(ExternalReference_Type)
	*p = x
	return p
}

func (x ExternalReference_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalReference_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protobom_v1_sbom_proto_enumTypes[2].Descriptor()
}

func (ExternalReference_Type) Type() protoreflect.EnumType {
	return &file_protobom_v1_sbom_proto_enumTypes[2]
}

func (x ExternalReference_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalReference_Type.Descriptor instead.
func (ExternalReference_Type) EnumDescriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{3, 0}
}

// Type of the software component.
type Node_Type int32

const (
	// Software component type is a package.
	Node_PACKAGE Node_Type = 0
	// Software component type is a file.
	Node_FILE Node_Type = 1
)

// Enum value maps for Node_Type.
var (
	Node_Type_name = map[int32]string{
		0: "PACKAGE",
		1: "FILE",
	}
	Node_Type_value = map[string]int32{
		"PACKAGE": 0,
		"FILE":    1,
	}
)

func (x Node_Type) Enum() *Node_Type {
	p := new(Node_Type)
	*p = x
	return p
}

func (x Node_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protobom_v1_sbom_proto_enumTypes[3].Descriptor()
}

func (Node_Type) Type() protoreflect.EnumType {
	return &file_protobom_v1_sbom_proto_enumTypes[3]
}

func (x Node_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_Type.Descriptor instead.
func (Node_Type) EnumDescriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{5, 0}
}

// Document is the top-level structure representing the entire Software Bill of Materials (SBOM).
// It serves as the core neutral ground for the SBOM translation process, encapsulating metadata,
// components (nodes), and the graph structure (edges).
type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata associated with the SBOM document
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// List of nodes and edges forming the SBOM graph
	NodeList *NodeList `protobuf:"bytes,2,opt,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobom_v1_sbom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_protobom_v1_sbom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{0}
}

func (x *Document) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Document) GetNodeList() *NodeList {
	if x != nil {
		return x.NodeList
	}
	return nil
}

// DocumentType represents the type of document in the Software Bill of Materials (SBOM) ecosystem.
// It categorizes the SBOM document based on its purpose or stage in the software development lifecycle.
type DocumentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SBOM document type.
	Type *DocumentType_SBOMType `protobuf:"varint,1,opt,name=type,proto3,enum=protobom.v1.DocumentType_SBOMType,oneof" json:"type,omitempty"`
	// Name associated with the document type.
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Description of the document type.
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *DocumentType) Reset() {
	*x = DocumentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobom_v1_sbom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentType) ProtoMessage() {}

func (x *DocumentType) ProtoReflect() protoreflect.Message {
	mi := &file_protobom_v1_sbom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentType.ProtoReflect.Descriptor instead.
func (*DocumentType) Descriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{1}
}

func (x *DocumentType) GetType() DocumentType_SBOMType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DocumentType_OTHER
}

func (x *DocumentType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DocumentType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// Edge represents relationships between nodes in the Software Bill of Materials (SBOM) graph.
// Each Edge captures the type of relationship and the nodes involved, providing a structured
// way to model dependencies and connections within the SBOM.
type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type enumerator representing the node relationship.
	Type Edge_Type `protobuf:"varint,1,opt,name=type,proto3,enum=protobom.v1.Edge_Type" json:"type,omitempty"`
	// Source node of the edge.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Target nodes of the edge.
	To []string `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobom_v1_sbom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_protobom_v1_sbom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{2}
}

func (x *Edge) GetType() Edge_Type {
	if x != nil {
		return x.Type
	}
	return Edge_UNKNOWN
}

func (x *Edge) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Edge) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

// ExternalReference is an entry linking an element to a resource defined outside the SBOM standard.
type ExternalReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL providing reference to an external resource.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Type of the external reference.
	Type ExternalReference_Type `protobuf:"varint,2,opt,name=type,proto3,enum=protobom.v1.ExternalReference_Type" json:"type,omitempty"`
	// Comments associated with the external reference.
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// Authority responsible for the external reference.
	Authority string `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	// Hashes associated with the external reference.
	Hashes map[int32]string `protobuf:"bytes,5,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExternalReference) Reset() {
	*x = ExternalReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobom_v1_sbom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalReference) ProtoMessage() {}

func (x *ExternalReference) ProtoReflect() protoreflect.Message {
	mi := &file_protobom_v1_sbom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalReference.ProtoReflect.Descriptor instead.
func (*ExternalReference) Descriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{3}
}

func (x *ExternalReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExternalReference) GetType() ExternalReference_Type {
	if x != nil {
		return x.Type
	}
	return ExternalReference_UNKNOWN
}

func (x *ExternalReference) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ExternalReference) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *ExternalReference) GetHashes() map[int32]string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

// Metadata encapsulates document-related details about the Software Bill of Materials (SBOM) document.
// It includes information such as the document's identifier, version, authorship, creation date,
// associated tools, and document types.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the document. Serial number in CycloneDX foramts, SPDXID in spdx formats.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version of the document. In Cyclone formats the version is translated from `Int` field in to a more general `String` field.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Name associated with the document.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Created date of the Document. In SPDX formats mapped to the created date field.
	Date *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Tools used in the creation or processing of the document.
	Tools []*Tool `protobuf:"bytes,5,rep,name=tools,proto3" json:"tools,omitempty"`
	// Individuals or organizations involved in the creation or maintenance of the document.
	Authors []*Person `protobuf:"bytes,6,rep,name=authors,proto3" json:"authors,omitempty"`
	// Comments on the document.
	Comment string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	// Types categorizing the document based on its purpose or stage in the software development lifecycle.
	DocumentTypes []*DocumentType `protobuf:"bytes,8,rep,name=document_types,json=documentTypes,proto3" json:"document_types,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobom_v1_sbom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_protobom_v1_sbom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Metadata) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Metadata) GetAuthors() []*Person {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Metadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Metadata) GetDocumentTypes() []*DocumentType {
	if x != nil {
		return x.DocumentTypes
	}
	return nil
}

// Node represents a central element within the Software Bill of Materials (SBOM) graph,
// serving as a vertex that captures vital information about a software component.
// Each Node in the SBOM graph signifies a distinct software component, forming the vertices of the graph.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the software component.
	Type Node_Type `protobuf:"varint,2,opt,name=type,proto3,enum=protobom.v1.Node_Type" json:"type,omitempty"`
	// Name of the software component.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Version string of the software component.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Package filename when there is one.
	FileName string `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// Website of the package.
	UrlHome string `protobuf:"bytes,6,opt,name=url_home,json=urlHome,proto3" json:"url_home,omitempty"`
	// Location to download the package.
	UrlDownload string `protobuf:"bytes,7,opt,name=url_download,json=urlDownload,proto3" json:"url_download,omitempty"`
	// Multiple licenses applicable to the software component,
	// Multiple licenses can be specified for CycloneDX 1.4 and files in SPDX.
	Licenses []string `protobuf:"bytes,8,rep,name=licenses,proto3" json:"licenses,omitempty"`
	// Concluded license applicable to the software component,
	// This is only in SPDX and it is just one.
	LicenseConcluded string `protobuf:"bytes,9,opt,name=license_concluded,json=licenseConcluded,proto3" json:"license_concluded,omitempty"`
	// Comments on the license.
	LicenseComments string `protobuf:"bytes,10,opt,name=license_comments,json=licenseComments,proto3" json:"license_comments,omitempty"`
	// Copyright information applicable to the software component.
	Copyright string `protobuf:"bytes,11,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// Hashes map associated with the software component.
	// Maps between hash algorithms types and hash values.
	Hashes map[int32]string `protobuf:"bytes,12,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// This field is intended to capture details related to the source or origin of the software component.
	// It may include any relevant background information or additional comments.
	SourceInfo string `protobuf:"bytes,13,opt,name=source_info,json=sourceInfo,proto3" json:"source_info,omitempty"`
	// Primary purpose or role assigned to the software component.
	PrimaryPurpose []Purpose `protobuf:"varint,14,rep,packed,name=primary_purpose,json=primaryPurpose,proto3,enum=protobom.v1.Purpose" json:"primary_purpose,omitempty"`
	// Comments on the software component.
	Comment string `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
	// Concise description of the software component (short description).
	Summary string `protobuf:"bytes,16,opt,name=summary,proto3" json:"summary,omitempty"`
	// Detailed description of the software component (full description).
	Description string `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	// One or more contributions or acknowledgments associated with the software component.
	Attribution []string `protobuf:"bytes,18,rep,name=attribution,proto3" json:"attribution,omitempty"`
	// One or more entities providing the software component.
	Suppliers []*Person `protobuf:"bytes,19,rep,name=suppliers,proto3" json:"suppliers,omitempty"`
	// One or more entities involved in the creation or maintenance of the software component.
	Originators []*Person `protobuf:"bytes,20,rep,name=originators,proto3" json:"originators,omitempty"`
	// Release date of the software component.
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// Build date of the software component.
	BuildDate *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
	// Valid until date of the software component.
	ValidUntilDate *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=valid_until_date,json=validUntilDate,proto3" json:"valid_until_date,omitempty"`
	// External references associated with the software component.
	ExternalReferences []*ExternalReference `protobuf:"bytes,24,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	// Software identifer map used by the component.
	// Maps between the software identifier types and the identifier values.
	Identifiers map[int32]string `protobuf:"bytes,25,rep,name=identifiers,proto3" json:"identifiers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// File types associated with the component
	FileTypes []string `protobuf:"bytes,26,rep,name=file_types,json=fileTypes,proto3" json:"file_types,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobom_v1_sbom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_protobom_v1_sbom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{5}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetType() Node_Type {
	if x != nil {
		return x.Type
	}
	return Node_PACKAGE
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Node) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Node) GetUrlHome() string {
	if x != nil {
		return x.UrlHome
	}
	return ""
}

func (x *Node) GetUrlDownload() string {
	if x != nil {
		return x.UrlDownload
	}
	return ""
}

func (x *Node) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Node) GetLicenseConcluded() string {
	if x != nil {
		return x.LicenseConcluded
	}
	return ""
}

func (x *Node) GetLicenseComments() string {
	if x != nil {
		return x.LicenseComments
	}
	return ""
}

func (x *Node) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *Node) GetHashes() map[int32]string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *Node) GetSourceInfo() string {
	if x != nil {
		return x.SourceInfo
	}
	return ""
}

func (x *Node) GetPrimaryPurpose() []Purpose {
	if x != nil {
		return x.PrimaryPurpose
	}
	return nil
}

func (x *Node) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Node) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetAttribution() []string {
	if x != nil {
		return x.Attribution
	}
	return nil
}

func (x *Node) GetSuppliers() []*Person {
	if x != nil {
		return x.Suppliers
	}
	return nil
}

func (x *Node) GetOriginators() []*Person {
	if x != nil {
		return x.Originators
	}
	return nil
}

func (x *Node) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Node) GetBuildDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildDate
	}
	return nil
}

func (x *Node) GetValidUntilDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntilDate
	}
	return nil
}

func (x *Node) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Node) GetIdentifiers() map[int32]string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *Node) GetFileTypes() []string {
	if x != nil {
		return x.FileTypes
	}
	return nil
}

// NodeList represents a collection of nodes and edges forming the Software Bill of Materials (SBOM) graph.
// It encapsulates the fundamental components of the SBOM, including software entities (nodes) and their relationships (edges).
type NodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of software components (nodes) in the SBOM graph.
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// List of relationships (edges) between nodes in the SBOM graph.
	Edges []*Edge `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
	// List of root elements in the SBOM graph.
	RootElements []string `protobuf:"bytes,3,rep,name=root_elements,json=rootElements,proto3" json:"root_elements,omitempty"`
}

func (x *NodeList) Reset() {
	*x = NodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobom_v1_sbom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeList) ProtoMessage() {}

func (x *NodeList) ProtoReflect() protoreflect.Message {
	mi := &file_protobom_v1_sbom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeList.ProtoReflect.Descriptor instead.
func (*NodeList) Descriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{6}
}

func (x *NodeList) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodeList) GetEdges() []*Edge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *NodeList) GetRootElements() []string {
	if x != nil {
		return x.RootElements
	}
	return nil
}

// Person represents an individual or organization involved in the creation or maintenance
// of the document or node.
type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the person or organization.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indicates whether the entity is an organization (true) or an individual (false).
	IsOrg bool `protobuf:"varint,2,opt,name=is_org,json=isOrg,proto3" json:"is_org,omitempty"`
	// Email address of the person or organization.
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// URL associated with the person or organization.
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// Phone number associated with the person or organization.
	Phone string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	// Contacts associated with the person or organization.
	Contacts []*Person `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobom_v1_sbom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_protobom_v1_sbom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{7}
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetIsOrg() bool {
	if x != nil {
		return x.IsOrg
	}
	return false
}

func (x *Person) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Person) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Person) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Person) GetContacts() []*Person {
	if x != nil {
		return x.Contacts
	}
	return nil
}

// Tool represents a software tool used in the creation or processing of the Software Bill of Materials (SBOM) document.
type Tool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the software tool.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the software tool.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Vendor or creator of the software tool.
	Vendor string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *Tool) Reset() {
	*x = Tool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobom_v1_sbom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_protobom_v1_sbom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_protobom_v1_sbom_proto_rawDescGZIP(), []int{8}
}

func (x *Tool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tool) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Tool) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

var File_protobom_v1_sbom_proto protoreflect.FileDescriptor

var file_protobom_v1_sbom_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x62,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x71, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x42, 0x4f,
	0x4d, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x22, 0x81, 0x01, 0x0a, 0x08, 0x53, 0x42, 0x4f, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x53, 0x49,
	0x47, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x08, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x06, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22,
	0x9e, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x53, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x54,
	0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x53, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x07, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x4e,
	0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x45, 0x4e,
	0x44, 0x53, 0x5f, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4f, 0x46, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45,
	0x53, 0x43, 0x45, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x45, 0x56, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x0f, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x45, 0x56, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x10, 0x10, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52,
	0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x13, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58,
	0x50, 0x41, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x52, 0x43, 0x48,
	0x49, 0x56, 0x45, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x45, 0x44, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x53, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x1a, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x45, 0x54, 0x41, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x1b, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x10, 0x1c, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x1d, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x53, 0x10, 0x1f, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x20,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x52, 0x45, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x45,
	0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x52, 0x45, 0x51, 0x55, 0x49, 0x53, 0x49,
	0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x10, 0x22, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x10,
	0x23, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x4f, 0x52, 0x10, 0x24, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x25, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x4f, 0x52, 0x10, 0x26, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x27, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x28,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x29, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x2a, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x4f,
	0x4c, 0x10, 0x2b, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x2c,
	0x22, 0xdd, 0x0b, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x09, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x4f, 0x4d, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x48, 0x41, 0x54, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x0c, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x0e, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x45,
	0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x4d,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x55, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x43,
	0x45, 0x4e, 0x53, 0x45, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47, 0x10, 0x17, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x18, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x56, 0x45, 0x4e, 0x5f,
	0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x1a, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x50, 0x4d, 0x10, 0x1d, 0x12,
	0x09, 0x0a, 0x05, 0x4e, 0x55, 0x47, 0x45, 0x54, 0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x41, 0x4d, 0x10, 0x20, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53,
	0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x22, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x23, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x53, 0x53,
	0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x24,
	0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x53, 0x10, 0x25, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x53, 0x10, 0x27, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x29, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41,
	0x52, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2a,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x56,
	0x45, 0x52, 0x53, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x2b, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53,
	0x4f, 0x52, 0x59, 0x10, 0x2c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x58, 0x10, 0x2e, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x2f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x45,
	0x4e, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x30, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x10, 0x31, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x57, 0x49, 0x44, 0x10, 0x32, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10,
	0x33, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x34, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54,
	0x10, 0x35, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x4e, 0x41,
	0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x36, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x37, 0x12, 0x07, 0x0a, 0x03, 0x56,
	0x43, 0x53, 0x10, 0x38, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x39, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x3a, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x3b, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x45, 0x42, 0x53, 0x49, 0x54, 0x45, 0x10, 0x3c,
	0x22, 0xac, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0xe6, 0x09, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x72,
	0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x72, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x35, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x6f, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa2, 0x01, 0x0a,
	0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x6f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4f,
	0x72, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x22, 0x4c, 0x0a, 0x04, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42,
	0x90, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x62, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x73, 0x62, 0x6f, 0x6d, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x0b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x6f, 0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobom_v1_sbom_proto_rawDescOnce sync.Once
	file_protobom_v1_sbom_proto_rawDescData = file_protobom_v1_sbom_proto_rawDesc
)

func file_protobom_v1_sbom_proto_rawDescGZIP() []byte {
	file_protobom_v1_sbom_proto_rawDescOnce.Do(func() {
		file_protobom_v1_sbom_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobom_v1_sbom_proto_rawDescData)
	})
	return file_protobom_v1_sbom_proto_rawDescData
}

var file_protobom_v1_sbom_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_protobom_v1_sbom_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_protobom_v1_sbom_proto_goTypes = []any{
	(DocumentType_SBOMType)(0),    // 0: protobom.v1.DocumentType.SBOMType
	(Edge_Type)(0),                // 1: protobom.v1.Edge.Type
	(ExternalReference_Type)(0),   // 2: protobom.v1.ExternalReference.Type
	(Node_Type)(0),                // 3: protobom.v1.Node.Type
	(*Document)(nil),              // 4: protobom.v1.Document
	(*DocumentType)(nil),          // 5: protobom.v1.DocumentType
	(*Edge)(nil),                  // 6: protobom.v1.Edge
	(*ExternalReference)(nil),     // 7: protobom.v1.ExternalReference
	(*Metadata)(nil),              // 8: protobom.v1.Metadata
	(*Node)(nil),                  // 9: protobom.v1.Node
	(*NodeList)(nil),              // 10: protobom.v1.NodeList
	(*Person)(nil),                // 11: protobom.v1.Person
	(*Tool)(nil),                  // 12: protobom.v1.Tool
	nil,                           // 13: protobom.v1.ExternalReference.HashesEntry
	nil,                           // 14: protobom.v1.Node.HashesEntry
	nil,                           // 15: protobom.v1.Node.IdentifiersEntry
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(Purpose)(0),                  // 17: protobom.v1.Purpose
}
var file_protobom_v1_sbom_proto_depIdxs = []int32{
	8,  // 0: protobom.v1.Document.metadata:type_name -> protobom.v1.Metadata
	10, // 1: protobom.v1.Document.node_list:type_name -> protobom.v1.NodeList
	0,  // 2: protobom.v1.DocumentType.type:type_name -> protobom.v1.DocumentType.SBOMType
	1,  // 3: protobom.v1.Edge.type:type_name -> protobom.v1.Edge.Type
	2,  // 4: protobom.v1.ExternalReference.type:type_name -> protobom.v1.ExternalReference.Type
	13, // 5: protobom.v1.ExternalReference.hashes:type_name -> protobom.v1.ExternalReference.HashesEntry
	16, // 6: protobom.v1.Metadata.date:type_name -> google.protobuf.Timestamp
	12, // 7: protobom.v1.Metadata.tools:type_name -> protobom.v1.Tool
	11, // 8: protobom.v1.Metadata.authors:type_name -> protobom.v1.Person
	5,  // 9: protobom.v1.Metadata.document_types:type_name -> protobom.v1.DocumentType
	3,  // 10: protobom.v1.Node.type:type_name -> protobom.v1.Node.Type
	14, // 11: protobom.v1.Node.hashes:type_name -> protobom.v1.Node.HashesEntry
	17, // 12: protobom.v1.Node.primary_purpose:type_name -> protobom.v1.Purpose
	11, // 13: protobom.v1.Node.suppliers:type_name -> protobom.v1.Person
	11, // 14: protobom.v1.Node.originators:type_name -> protobom.v1.Person
	16, // 15: protobom.v1.Node.release_date:type_name -> google.protobuf.Timestamp
	16, // 16: protobom.v1.Node.build_date:type_name -> google.protobuf.Timestamp
	16, // 17: protobom.v1.Node.valid_until_date:type_name -> google.protobuf.Timestamp
	7,  // 18: protobom.v1.Node.external_references:type_name -> protobom.v1.ExternalReference
	15, // 19: protobom.v1.Node.identifiers:type_name -> protobom.v1.Node.IdentifiersEntry
	9,  // 20: protobom.v1.NodeList.nodes:type_name -> protobom.v1.Node
	6,  // 21: protobom.v1.NodeList.edges:type_name -> protobom.v1.Edge
	11, // 22: protobom.v1.Person.contacts:type_name -> protobom.v1.Person
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_protobom_v1_sbom_proto_init() }
func file_protobom_v1_sbom_proto_init() {
	if File_protobom_v1_sbom_proto != nil {
		return
	}
	file_protobom_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protobom_v1_sbom_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobom_v1_sbom_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobom_v1_sbom_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobom_v1_sbom_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ExternalReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobom_v1_sbom_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobom_v1_sbom_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobom_v1_sbom_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*NodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobom_v1_sbom_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobom_v1_sbom_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Tool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protobom_v1_sbom_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobom_v1_sbom_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobom_v1_sbom_proto_goTypes,
		DependencyIndexes: file_protobom_v1_sbom_proto_depIdxs,
		EnumInfos:         file_protobom_v1_sbom_proto_enumTypes,
		MessageInfos:      file_protobom_v1_sbom_proto_msgTypes,
	}.Build()
	File_protobom_v1_sbom_proto = out.File
	file_protobom_v1_sbom_proto_rawDesc = nil
	file_protobom_v1_sbom_proto_goTypes = nil
	file_protobom_v1_sbom_proto_depIdxs = nil
}
